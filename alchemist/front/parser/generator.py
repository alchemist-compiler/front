# This file is part of the Alchemist front-end libraries
# Copyright (C) 2023  Natan Junges <natanajunges@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# The code generated by this library is also under the GNU General Public
# License.

from typing import Union
from collections.abc import Sequence

RuleTemplate = Union[Sequence["RuleTemplate"], "Rule", str]


class Rule:
    @staticmethod
    def get(template: RuleTemplate) -> "Rule":
        if isinstance(template, tuple):
            return Group(template)

        if isinstance(template, list):
            return Optional(template)

        if isinstance(template, str):
            return Term(template)

        return template

    @staticmethod
    def filter(templates: Sequence[RuleTemplate]) -> list["Rule"]:
        rules = [Rule.get(template) for template in templates if not
                 isinstance(template, Switch) or template.enabled]
        rules = [rule for rule in rules if isinstance(rule, Term) or
                 len(rule.rules.rules if isinstance(rule.rules, Group) else
                     rule.rules) > 0]
        return rules

    @staticmethod
    def indent(level: int) -> str:
        return f"\n{'    ' * level}"

    @staticmethod
    def paths(level: int) -> str:
        return f"paths{str(level)}"

    def __init__(self, rules: Union[list["Rule"], "Group"]):
        self.rules: Union[list[Rule], Group] = rules

    def __call__(self, indent: int, level: int) -> str:
        raise NotImplementedError()


class Group(Rule):
    def __init__(self, templates: Sequence[RuleTemplate]):
        super().__init__(Rule.filter(templates))
        i = 0

        while i < len(self.rules):
            if isinstance(self.rules[i], Group):
                rules = self.rules[i].rules
                self.rules = self.rules[:i] + rules + self.rules[i + 1:]
                i += len(rules)
            else:
                i += 1

    def __call__(self, indent: int, level: int) -> str:
        code = ""

        for rule in self.rules:
            code += rule(indent, level)

        return code


class Optional(Rule):
    def __init__(self, templates: list[RuleTemplate]):
        super().__init__(Group(templates))

        if (len(self.rules.rules) == 1 and
                isinstance(self.rules.rules[0], Optional)):
            self.rules = self.rules.rules[0].rules

    def __call__(self, indent: int, level: int) -> str:
        code = "\n"
        code += f"{Rule.indent(indent)}try:  # optional"
        code += f"{Rule.indent(indent + 1)}{Rule.paths(level + 1)} = {Rule.paths(level)}"
        code += self.rules(indent + 1, level + 1)
        code += f"{Rule.indent(indent + 1)}{Rule.paths(level)} |= {Rule.paths(level + 1)}"
        code += f"{Rule.indent(indent)}except (CompilerSyntaxError, CompilerEOIError):"
        code += f"{Rule.indent(indent + 1)}pass"
        code += "\n"
        return code


class Switch(Rule):
    enabled: bool = False

    def __init__(self, *templates: RuleTemplate):
        if self.enabled:
            super().__init__(Group(templates))

    def __call__(self, indent: int, level: int) -> str:
        return self.rules(indent, level)


class repeat(Rule):
    def __init__(self, *templates: RuleTemplate):
        super().__init__(Group(templates))

        if (len(self.rules.rules) == 1 and
                isinstance(self.rules.rules[0], repeat)):
            self.rules = self.rules.rules[0].rules

    def __call__(self, indent: int, level: int) -> str:
        code = "\n"
        code += f"{Rule.indent(indent)}# begin repeat"
        code += f"{Rule.indent(indent)}{Rule.paths(level + 1)} = {Rule.paths(level)}"
        code += "\n"
        code += f"{Rule.indent(indent)}while True:"
        code += f"{Rule.indent(indent + 1)}try:"
        code += self.rules(indent + 2, level + 1)
        code += f"{Rule.indent(indent + 2)}{Rule.paths(level)} |= {Rule.paths(level + 1)}"
        code += f"{Rule.indent(indent + 1)}except (CompilerSyntaxError, CompilerEOIError):"
        code += f"{Rule.indent(indent + 2)}break"
        code += "\n"
        code += f"{Rule.indent(indent)}# end repeat"
        code += "\n"
        return code


class oneof(Rule):
    def __init__(self, *templates: RuleTemplate):
        super().__init__(Rule.filter(templates))
        i = 0

        while i < len(self.rules):
            if isinstance(self.rules[i], oneof):
                rules = self.rules[i].rules
                self.rules = self.rules[:i] + rules + self.rules[i + 1:]
                i += len(rules)
            else:
                i += 1

    def __call__(self, indent: int, level: int) -> str:
        if len(self.rules) == 1:
            return self.rules[0](indent, level)

        code = "\n"
        code += f"{Rule.indent(indent)}# begin oneof"
        code += f"{Rule.indent(indent)}{Rule.paths(level + 1)} = set()"

        for i, rule in enumerate(self.rules):
            code += "\n"
            code += f"{Rule.indent(indent)}try:  # option {i + 1}"
            code += f"{Rule.indent(indent + 1)}{Rule.paths(level + 2)} = {Rule.paths(level)}"
            code += rule(indent + 1, level + 2)
            code += f"{Rule.indent(indent + 1)}{Rule.paths(level + 1)} |= {Rule.paths(level + 2)}"
            code += f"{Rule.indent(indent)}except CompilerSyntaxError:"
            code += f"{Rule.indent(indent + 1)}pass"

        code += "\n"
        code += f"{Rule.indent(indent)}if len({Rule.paths(level + 1)}) == 0:"
        code += f"{Rule.indent(indent + 1)}raise CompilerSyntaxError(self)"
        code += "\n"
        code += f"{Rule.indent(indent)}{Rule.paths(level)} = {Rule.paths(level + 1)}"
        code += f"{Rule.indent(indent)}# end oneof"
        code += "\n"
        return code


class Term(Rule):
    def __init__(self, node: str):
        self.node: str = node

    def __call__(self, indent: int, level: int) -> str:
        return f"{Rule.indent(indent)}{Rule.paths(level)} = self.process_paths({Rule.paths(level)}, {self.node})"


class ProductionTemplate:
    template: RuleTemplate = ()

    @classmethod
    def generate(cls) -> str:
        if isinstance(cls.template, Switch) and not cls.template.enabled:
            return ""

        rule = Rule.get(cls.template)

        if (not isinstance(rule, Term) and
                len(rule.rules.rules if isinstance(rule.rules, Group) else
                    rule.rules) == 0):
            return ""

        code = f"class {cls.__name__}(Production):"
        code += f"{Rule.indent(1)}def __init__(self, parent: Optional[Production], lexer: \"Lexer\"):"
        code += f"{Rule.indent(2)}super().__init__(parent, lexer)"
        code += f"{Rule.indent(2)}{Rule.paths(0)} = {{lexer.get_state()}}"
        code += rule(2, 0).replace("\n\n\n", "\n\n")
        code += f"{Rule.indent(2)}self.paths: set[\"Terminal\"] = {Rule.paths(0)}"
        return code
